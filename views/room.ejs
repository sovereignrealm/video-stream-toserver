<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Video Recorder</title>
  <style>
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    button {
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div id="video-grid"></div>
  <div>
    <button id="recording-btn"></button>
  </div>
  <script>
    const videoGrid = document.getElementById('video-grid');
    const recordingBtn = document.getElementById('recording-btn');
    let isRecording = false;
    recordingBtn.textContent = 'Start';

    const changeUIonStopRecording = () => {
      recordingBtn.textContent = 'Start';
      // https://stackoverflow.com/questions/11642926/stop-close-webcam-stream-which-is-opened-by-navigator-mediadevices-getusermedia
      stopRecording(videoStream);
      videoGrid.innerHTML = "";
      isRecording = false;
    }

    async function sendToBackend(stream) {
      try {
        const ws = new WebSocket('<%= wsUrl %>' + "/streaming", '<%= wsAuth %>');
        const recorderOptions = {
          mimeType: 'video/webm',
          videoBitsPerSecond: 200000 // 0.2 Mbit/sec.
        };
        const mediaRecorder = new MediaRecorder(stream, recorderOptions);
        mediaRecorder.start(1000); // 1000 - the number of milliseconds to record into each Blob
        mediaRecorder.ondataavailable = (event) => {
          if (event.data && event.data.size > 0) {
            ws.send(event.data);
          }
        };
        ws.onclose = () => {
          ws.close(1000);
          changeUIonStopRecording();
        };
      } catch (error) {
        alert(error);
        changeUIonStopRecording();
      }
    }

    function stopRecording(stream) {
      stream.getTracks().forEach(function (track) {
        track.stop();
      });
    }

    function addVideoStream(stream) {
      const video = document.createElement('video')
      video.muted = true;
      video.srcObject = stream
      video.addEventListener('loadedmetadata', () => {
        video.play()
      })
      sendToBackend(stream);
      videoGrid.append(video);
    }

    const startRecording = async (userMode, retry = 0) => {
      const facingMode = userMode === "user" ? {
        facingMode: userMode
      } : {
        facingMode: {
          exact: userMode
        }
      };
      try {
        const constraints = {
          video: {
            width: {
              min: 1280,
              ideal: 1920,
              max: 1920,
            },
            height: {
              min: 720,
              ideal: 1080,
              max: 1080
            },
            ...facingMode
          },
          audio: true
        }
        videoStream = await navigator.mediaDevices.getUserMedia(constraints);
        recordingBtn.textContent = 'Stop';
        addVideoStream(videoStream)
        isRecording = true;
      } catch (error) {
        // alert("Name: " + error.name + " & Constraint: " + error.constraint)
        alert("Back camera failed trying with front camera...");
        if (retry === 0) {
          startRecording("user", 1);
        }
      }
    }

    let videoStream;
    recordingBtn.onclick = () => {
      if (isRecording) {
        changeUIonStopRecording();
      } else {
        startRecording("environment");
      }
    }
  </script>
</body>

</html>